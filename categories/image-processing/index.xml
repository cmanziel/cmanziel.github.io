<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Image Processing on Claudio Mandelli</title><link>https://cmanziel.github.io/categories/image-processing/</link><description>Recent content in Image Processing on Claudio Mandelli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cmanziel.github.io/categories/image-processing/index.xml" rel="self" type="application/rss+xml"/><item><title>ImageEditor</title><link>https://cmanziel.github.io/p/imageeditor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cmanziel.github.io/p/imageeditor/</guid><description>&lt;img src="https://cmanziel.github.io/p/imageeditor/collage.png" alt="Featured image of post ImageEditor" />&lt;p>This project combines two other ones i made before.
One is about drawing on a window using the mouse cursor as a brush, the other is the pnglib library to convert into an image what&amp;rsquo;s been drawn on the window. &lt;a class="link" href="https://github.com/cmanziel/ImageEditor" target="_blank" rel="noopener"
>Source code&lt;/a>.&lt;/p>
&lt;h2 id="window">Window
&lt;/h2>&lt;p>The window is conceptually divided into a grid of pixels, whose data is stored in a bi-dimensional array of &lt;em>point&lt;/em> structures.
The image pixels are mapped 1:1 to the window pixels.
The window creation is done through GLFW.&lt;/p>
&lt;h2 id="image-decompression">Image Decompression
&lt;/h2>&lt;p>To edit the image it has to be firstly displayed onto the window.
To do so the image has to be decompressed to get the raw pixel data containing the rgb values for each pixel.
The decompression is handled by the &lt;em>pnglib&lt;/em> library: its &lt;em>decompress&lt;/em> function receives the image file and returns its pixel data.
If no image is provided or the file is corrupted a default white color is applied to every pixel&lt;/p>
&lt;h2 id="brush">Brush
&lt;/h2>&lt;p>A brush is constructed around the mouse cursor as a circular grid.
The center of the grid is the pixel the cursor is currently pointing.
Its dimensions can vary on mouse input or based on the cursor&amp;rsquo;s speed as selected by the user.
Handled by the Brush class.&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/imageeditor/drawing_site.jpg"
width="400"
height="200"
srcset="https://cmanziel.github.io/p/imageeditor/drawing_site_hu10146579996135543304.jpg 480w, https://cmanziel.github.io/p/imageeditor/drawing_site_hu3170732616649402332.jpg 1024w"
loading="lazy"
alt="Drawing before the brush implementation: the cursor colors only the pixel at its position."
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/imageeditor/drawing_0_site.jpg"
width="2000"
height="1000"
srcset="https://cmanziel.github.io/p/imageeditor/drawing_0_site_hu115328198846691255.jpg 480w, https://cmanziel.github.io/p/imageeditor/drawing_0_site_hu17636706954641804793.jpg 1024w"
loading="lazy"
alt="Brush implemented as a square grid. Its dimension is modified through key input."
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/p>
&lt;h2 id="pointbuffer">PointBuffer
&lt;/h2>&lt;p>This is the class that actually handles the window&amp;rsquo;s grid allocation in memory and modifies its values.
The functions &lt;em>InsertPoint&lt;/em> and &lt;em>RemovePoint&lt;/em> use the brush&amp;rsquo;s position and dimension to draw the correct points on the image.&lt;/p>
&lt;h2 id="image-generation">Image Generation
&lt;/h2>&lt;p>The initial image&amp;rsquo;s pixel data is overwritten by what&amp;rsquo;s drawn onto it.
The window&amp;rsquo;s bi-dimensional grid array serves as the raw pixel data input for the &lt;em>compress&lt;/em> function of the &lt;em>pnglib&lt;/em> library.
A PNG file is written from scratch by the library inserting the compressed pixel data into it.&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/imageeditor/collage.png"
width="1920"
height="1920"
srcset="https://cmanziel.github.io/p/imageeditor/collage_hu1759512000934668714.png 480w, https://cmanziel.github.io/p/imageeditor/collage_hu3895675240254944732.png 1024w"
loading="lazy"
alt="Drawing on images previously generated by this application. Brush implemented as a circular grid."
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;!-- ## Syntax
```markdown
![Image 1](1.jpg) ![Image 2](2.jpg)
```
## Result
![Image 1](1.jpg) ![Image 2](2.jpg)
> Photo by [mymind](https://unsplash.com/@mymind) and [Luke Chesser](https://unsplash.com/@lukechesser) on [Unsplash](https://unsplash.com/) --></description></item><item><title>CSImage</title><link>https://cmanziel.github.io/p/csimage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cmanziel.github.io/p/csimage/</guid><description>&lt;img src="https://cmanziel.github.io/p/csimage/effects.png" alt="Featured image of post CSImage" />&lt;p>This project is a refactor of the &lt;a class="link" href="https://github.com/cmanziel/ImageEditor" target="_blank" rel="noopener"
>ImageEditor&lt;/a> project. The first version of the project was mainly relying on the CPU for all the drawing and effects processes. This one uses compute shaders for every step of the way. &lt;a class="link" href="https://github.com/cmanziel/CSImage" target="_blank" rel="noopener"
>Source code&lt;/a>.&lt;/p>
&lt;h2 id="drawing">Drawing
&lt;/h2>&lt;p>Each drawing style the brush can have has its own shader. The shader samples the canvas texture to retrieve the background color through GLSL&amp;rsquo;s &lt;em>imageLoad&lt;/em> function, and stores the color being drawn into the render target texture.
After the off-screen rendering is done, the render texture is mapped to the vertices of a quad which is rendered through the usual vertex and fragment shader.&lt;/p>
&lt;p>For every compute shader, a &lt;em>brush radius&lt;/em> * &lt;em>brush radius&lt;/em> number of work groups is dispatched. The &lt;em>local_size&lt;/em> of every work group is 1 x 1 x 1, so the image can be accessed using the &lt;em>gl_GlobalInvocationID.xy&lt;/em> built-in variable as the UV coordinates.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Execute&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Dispatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_BrushRadius&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m_BrushRadius&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">Dispatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">xGroups&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">yGroups&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">zGroups&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">glDispatchCompute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xGroups&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">yGroups&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">zGroups&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">glMemoryBarrier&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GL_SHADER_IMAGE_ACCESS_BARRIER_BIT&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">GL_SHADER_STORAGE_BARRIER_BIT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="brush-effects">Brush Effects
&lt;/h2>&lt;h3 id="edge-detection-sobel-operator">Edge Detection (Sobel Operator)
&lt;/h3>&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Sobel_operator" target="_blank" rel="noopener"
>Two kernels&lt;/a> are defined to process every pixel in area covered by the brush based on its surrounding pixels.
The effect is applied on everything that has been drawn onto the canvas and not only on the original canvas.&lt;/p>
&lt;p>To prevent &lt;em>imageStore&lt;/em> operations to affect &lt;em>imageLoad&lt;/em> operations in the same shader dispatch a separate canvas texture image is used.
This prevents an &lt;em>imageLoad&lt;/em> operation to get the value of another pixel in the grid which was just modified by the same operation that is being done on the current one.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float&lt;/span> &lt;span class="nf">kernel_mult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ivec2&lt;/span> &lt;span class="n">pixel_uv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">ch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mat3&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">kernel_sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ivec2&lt;/span> &lt;span class="n">dims&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">imageSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">edited&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ivec2&lt;/span> &lt;span class="n">grid_uv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pixel_uv&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">ivec2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec4&lt;/span> &lt;span class="n">current_color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">imageLoad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sobelCanvas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">ivec2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grid_uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid_uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">kernel_sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">current_color&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">kernel&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">kernel_sum&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vec4&lt;/span> &lt;span class="nf">edge_pixel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ivec2&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// imageLoad with an out of boundary coordinate returns an all zeroes vec4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// so for the edge pixels of the imagedo the kernel multiplication with out of bounds values as for the other pixels
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec4&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// for each of the rgb channels compute the kernel calculation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">Gx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kernel_mult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sobel_kernel_Gx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">Gy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kernel_mult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sobel_kernel_Gy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sqrt is a floating point operation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Gx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">Gx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Gy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">Gy&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">SOBEL_CLAMP_FLOAT_VALUE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">xyz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">vec3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sum&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="blur-box-blur">Blur (Box Blur)
&lt;/h3>&lt;p>A &lt;a class="link" href="https://en.wikipedia.org/wiki/Box_blur" target="_blank" rel="noopener"
>Box Blur&lt;/a> algorithm is applied to every pixel inside the brush area. The result is the average value between a 3x3 grid around each pixel. The effect is applied on everything that has been drawn onto the canvas and not only on the original canvas.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C" data-lang="C">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vec4&lt;/span> &lt;span class="nf">blur_pixel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ivec2&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ivec2&lt;/span> &lt;span class="n">dims&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec4&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// if the pixel is on the edge of the image, return it unmodified
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">dims&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">dims&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">imageLoad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blurCanvas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ivec2&lt;/span> &lt;span class="n">grid_uv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">uv&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">ivec2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vec4&lt;/span> &lt;span class="n">current_color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">imageLoad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blurCanvas&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">ivec2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grid_uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">grid_uv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">current_color&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">xyz&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- ## Syntax
```markdown
![Image 1](1.jpg) ![Image 2](2.jpg)
```
## Result
![Image 1](1.jpg) ![Image 2](2.jpg)
> Photo by [mymind](https://unsplash.com/@mymind) and [Luke Chesser](https://unsplash.com/@lukechesser) on [Unsplash](https://unsplash.com/) --></description></item><item><title>pnglib</title><link>https://cmanziel.github.io/p/pnglib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cmanziel.github.io/p/pnglib/</guid><description>&lt;img src="https://cmanziel.github.io/p/pnglib/cover.jpg" alt="Featured image of post pnglib" />&lt;p>Static library to encode or decode PNG files by compressing data into zlib datastreams or decompressing from them.
The aim of this project was to generate an uncorrupted PNG file from scratch. &lt;a class="link" href="https://github.com/cmanziel/pnglib" target="_blank" rel="noopener"
>Source code&lt;/a>.&lt;/p>
&lt;h2 id="png-file-structure">PNG file structure
&lt;/h2>&lt;p>According to the &lt;a class="link" href="https://www.w3.org/TR/png-3" target="_blank" rel="noopener"
>PNG specification&lt;/a> a PNG file has to contain at least each one of these chunks of data:&lt;/p>
&lt;h3 id="ihdr">IHDR
&lt;/h3>&lt;p>This is the image header chunk. It contains general information about the image like width, height, pixel data length and format and an 8-byte signature that every PNG file contains.&lt;/p>
&lt;h3 id="idat">IDAT
&lt;/h3>&lt;p>This is the chunk that contains the actual image pixel data. The original raw data, stored in the format indicated in the IHDR chunk, has to be compressed through the zlib library&amp;rsquo;s DEFLATE routine and put into one or multiple IDAT chunks one after each other. An incorrect zlib&amp;rsquo;s datastream will result in a corrupted PNG file.&lt;/p>
&lt;h3 id="iend">IEND
&lt;/h3>&lt;p>Chunk at the end of the image file.&lt;/p>
&lt;h2 id="image-encoding">Image Encoding
&lt;/h2>&lt;p>Each chunk consists of three or four fields:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Length&lt;/strong>: A four-byte unsigned integer giving the number of bytes in the chunk&amp;rsquo;s &lt;em>data&lt;/em> field.&lt;/li>
&lt;li>&lt;strong>Chunk type&lt;/strong>: The data bytes appropriate to the chunk type, if any. This field can be of zero length.&lt;/li>
&lt;li>&lt;strong>Chunk data&lt;/strong>: the actual data for the chunk in use&lt;/li>
&lt;li>&lt;strong>CRC&lt;/strong>: A four-byte CRC calculated on the preceding bytes in the chunk, including the chunk type field and chunk data fields, but not including the length field.&lt;/li>
&lt;/ul>
&lt;p>When encoding a PNG file the library function &lt;em>compress&lt;/em> calls the zlib&amp;rsquo;s compression routines, sets the necessary fields for every chunk (like signatures and CRCs) and writes to the image file opened.&lt;/p>
&lt;h2 id="image-decoding">Image Decoding
&lt;/h2>&lt;p>When decoding a PNG file the library searches all the IDAT chunks in the file, concatenates their data to get the whole zlib datastream, decompresses it to the original pixel data and returns it.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphics Programming on Claudio Mandelli</title><link>https://cmanziel.github.io/categories/graphics-programming/</link><description>Recent content in Graphics Programming on Claudio Mandelli</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://cmanziel.github.io/categories/graphics-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Minecraft-like terrain</title><link>https://cmanziel.github.io/p/minecraft-like-terrain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cmanziel.github.io/p/minecraft-like-terrain/</guid><description>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/terrain_noise.png" alt="Featured image of post Minecraft-like terrain" />&lt;p>This project aims to recreate a Minecraft-like terrain generation without using an engine. Made using OpenGL and the GLFW, GLM and GLEW libraries. &lt;a class="link" href="https://github.com/cmanziel/mncrft" target="_blank" rel="noopener"
>Source code&lt;/a>.&lt;/p>
&lt;h2 id="main-classes">Main Classes
&lt;/h2>&lt;p>These are the main classes used in the project:&lt;/p>
&lt;h3 id="terrain">Terrain
&lt;/h3>&lt;p>The terrain is composed of chunks, which are generated around the player according to his position in space.&lt;/p>
&lt;h3 id="chunk">Chunk
&lt;/h3>&lt;p>A single chunk is a collection of Blocks, every chunk allocates in the memory its own blocks, giving them a local position and a world position based on its own. From every chunk is created a Mesh, which is the actual collection of vertices that will be sent to the shaders to be drawn on the screen.&lt;/p>
&lt;h3 id="block">Block
&lt;/h3>&lt;p>A Block is the smallest component of the terrain. Each block has a different ID according to its local y coordinate in the chunk. The ID determines which texture will be applied to the block&amp;rsquo;s faces and if the block is to be considered solid or not when the mesh of its chunk is being created. Block IDs are &lt;em>air&lt;/em>, &lt;em>dirt&lt;/em>, &lt;em>grass&lt;/em>, &lt;em>cobblestone&lt;/em>.&lt;/p>
&lt;h3 id="mesh">Mesh
&lt;/h3>&lt;p>The mesh is the collection of vertices of a chunk that will eventually be drawn to the screen. It is created by evaluating if the blocks&amp;rsquo; faces would be visible by the player, if not there&amp;rsquo;s no need to draw them on the screen. The mesh vertices will then be used as the buffer in the function glBufferData or glBufferSubData.&lt;/p>
&lt;h3 id="shader-and-buffer">Shader and Buffer
&lt;/h3>&lt;p>These are the classes that wrap around the opengl functions. They are responsible of creating a shader program, compiling it and deleting it, allocating the gl buffers and update them with data from the meshes.&lt;/p>
&lt;h2 id="terrain-generation">Terrain generation
&lt;/h2>&lt;ul>
&lt;li>In the Terrain class constructor every Chunk class instance is allocated and stored row-by-row along the z axis in a bidimensional array.&lt;/li>
&lt;li>The chunks grid consists of a number of CHUNK_RADIUS chunks created along the positive and negative z and x axis from the player&lt;/li>
&lt;li>Then for every chunk the function GenerateMeshes is called: the function checks if the current chunk being processed is in front of the camera to determine if the mesh should be generated or not&lt;/li>
&lt;li>After the call of GenerateMeshes the value of m_CurrentChunk is incremented to process, in the next frame, the next chunk in the grid&lt;/li>
&lt;li>When the player crosses the edge of the chunk it&amp;rsquo;s in, the terrain around it is regenerated: chunks that are distant more then CHUNK_RADIUS from its position in the grid are deleted and new ones are generated in the direction it&amp;rsquo;s moving&lt;/li>
&lt;li>When this occurs, m_CurrentChunk is reset to 0 because all the meshes should be generated again according to the new chunks&amp;rsquo; disposition that affects some of the chunks&amp;rsquo; surroundings&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/terrain_noise.png"
width="1264"
height="940"
srcset="https://cmanziel.github.io/p/minecraft-like-terrain/terrain_noise_hu8683083574416825653.png 480w, https://cmanziel.github.io/p/minecraft-like-terrain/terrain_noise_hu16460420673969726289.png 1024w"
loading="lazy"
alt="Terrain generated with the use of Perlin noise to determine the height of every column of blocks."
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;h2 id="mesh-generation">Mesh generation
&lt;/h2>&lt;ul>
&lt;li>every chunk has a m_LowestSolidHeight field that holds the lowest y coordinate value of the block whose ID is not &lt;em>air&lt;/em>. The m_Blocks array is iterated through starting from the lowest solid block&amp;rsquo;s index&lt;/li>
&lt;li>the condition checked first is if the block&amp;rsquo;s world position lies inside the camera&amp;rsquo;s frustum.&lt;/li>
&lt;li>for every face of the blocks is checked if there is a neighbouring block which is solid. If it is not, then the vertices of the face should be added to the mesh because they will be visible&lt;/li>
&lt;li>if a face is at the edge of a chunk, then the program checks if the neighbouring chunk exists and if it has a solid block adjacent to the face&lt;/li>
&lt;li>By doing this only the vertices that make up the external profile of the chunk will be rendered&lt;/li>
&lt;li>three vectors store the data that&amp;rsquo;s needed to correctly render a block face: m_Faces,m_TexCoords and m_ModelMats&lt;/li>
&lt;/ul>
&lt;p>&lt;em>m_Faces&lt;/em>: each face of a block has its array of data in the header file Renderer.h. For every face added to the mesh one of the values of the enum variable &amp;ldquo;sides&amp;rdquo; is pushed back to the m_Faces vector. So when the process of mesh generation is done m_Faces is a collection of indexes that determine which of the six arrays that represent a face will be used in the shader.&lt;/p>
&lt;p>&lt;em>m_TexCoords&lt;/em>: for every vertex added to the mesh the corresponding 2D textures coordinates are pushed back to the m_TexCoords vector.
The texture coordinates referer to the texture atlas image and depend on the block&amp;rsquo;s ID&lt;/p>
&lt;p>&lt;em>m_ModelMats&lt;/em>: for every face added to the mesh, a mat4 4x4 matrix is pushed back to the m_ModelMats vector. These are the matrices that will compute the correct 3D position of a vertex.
When a face is deemed to be part of the chunk&amp;rsquo;s mesh a model matrix is calculated from its block&amp;rsquo;s world position and in the vertex shader every position of the vertices of that face will be trasnformed by the matrix&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/no_shell.png"
width="2160"
height="1317"
srcset="https://cmanziel.github.io/p/minecraft-like-terrain/no_shell_hu797035067625271222.png 480w, https://cmanziel.github.io/p/minecraft-like-terrain/no_shell_hu13492098786487757639.png 1024w"
loading="lazy"
alt="A chunk of blocks before evaluating its mesh."
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/shell.png"
width="2160"
height="1318"
srcset="https://cmanziel.github.io/p/minecraft-like-terrain/shell_hu6658714075232909009.png 480w, https://cmanziel.github.io/p/minecraft-like-terrain/shell_hu7867860755738880723.png 1024w"
loading="lazy"
alt="A chunk of blocks after evaluating its mesh, every vertex inside the chunk is not rendered."
class="gallery-image"
data-flex-grow="163"
data-flex-basis="393px"
>&lt;/p>
&lt;h2 id="textures">Textures
&lt;/h2>&lt;p>To every visible face of a block is applied a texture according to its ID. All the different textures are stored in a single texture atlas, handled by the &lt;em>TextureAtlas&lt;/em> class, and are retrieved through the correct offset based on the block&amp;rsquo;s ID.&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/textures.png"
width="1444"
height="992"
srcset="https://cmanziel.github.io/p/minecraft-like-terrain/textures_hu14781416119664205185.png 480w, https://cmanziel.github.io/p/minecraft-like-terrain/textures_hu1641730381601720174.png 1024w"
loading="lazy"
alt="Textures applied to the blocks&amp;rsquo; faces."
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/texture_ids.png"
width="1267"
height="948"
srcset="https://cmanziel.github.io/p/minecraft-like-terrain/texture_ids_hu6595682822299860728.png 480w, https://cmanziel.github.io/p/minecraft-like-terrain/texture_ids_hu12111103027935513723.png 1024w"
loading="lazy"
alt="Different textures for different block IDs based on the height they&amp;rsquo;re at."
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;h2 id="block-breaking">Block Breaking
&lt;/h2>&lt;p>A ray is sent from the player&amp;rsquo;s camera into the world. If it intersects a block whose ID isn&amp;rsquo;t &lt;em>air&lt;/em> the block&amp;rsquo;s edges are highlighted. On mouse input, the block&amp;rsquo;s ID is set to &lt;em>air&lt;/em> so that when the mesh is regenerated its faces won&amp;rsquo;t be rendered, conveying the effect of breaking the block.
The highlighting of the edges is done by giving every vertex of a face &lt;em>barycentric coordinates&lt;/em> and then checking them in the fragment shader to determine if the vertex is at the edge of a face.&lt;/p>
&lt;p>&lt;img src="https://cmanziel.github.io/p/minecraft-like-terrain/block_pointed.png"
width="1258"
height="942"
srcset="https://cmanziel.github.io/p/minecraft-like-terrain/block_pointed_hu5718781423390599879.png 480w, https://cmanziel.github.io/p/minecraft-like-terrain/block_pointed_hu14900624964200655163.png 1024w"
loading="lazy"
alt="Highlighting the block pointed by the player."
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p></description></item></channel></rss>